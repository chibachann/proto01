import * as React from "react"
import * as styles from "./ServicesSection.module.css"

const ServicesSection = ({ 
  title = "„Éó„É≠„Éï„Çß„ÉÉ„Ç∑„Éß„Éä„É´<br>„Çµ„Éº„Éì„Çπ",
  subtitle = "ÊúÄÊñ∞ÊäÄË°ì„Å®Â∞ÇÈñÄÁü•Ë≠ò„Åß„ÄÅ„ÅäÂÆ¢Êßò„ÅÆ„Éì„Ç∏„Éç„ÇπË™≤È°å„ÇíËß£Ê±∫„Åó„ÄÅ„Éá„Ç∏„Çø„É´ÊôÇ‰ª£„ÅÆÊàêÂäü„Çí„Çµ„Éù„Éº„Éà„Åó„Åæ„Åô",
  services = [],
  className = ""
}) => {
  const [isVisible, setIsVisible] = React.useState(false)
  const [hoveredIndex, setHoveredIndex] = React.useState(null)

  React.useEffect(() => {
    const observer = new IntersectionObserver(
      ([entry]) => {
        if (entry.isIntersecting) {
          setIsVisible(true)
          observer.disconnect()
        }
      },
      { threshold: 0.1 }
    )

    const sectionRef = document.getElementById('services-section')
    if (sectionRef) {
      observer.observe(sectionRef)
    }

    return () => observer.disconnect()
  }, [])

  const defaultServices = [
    {
      id: 1,
      category: 'technology',
      icon: 'üöÄ',
      title: 'AI„ÇΩ„É™„É•„Éº„Ç∑„Éß„É≥ÈñãÁô∫',
      subtitle: 'Ê©üÊ¢∞Â≠¶Áøí„ÉªÊ∑±Â±§Â≠¶Áøí„Å´„Çà„ÇãËá™ÂãïÂåñ',
      description: 'ÊúÄÊñ∞„ÅÆAIÊäÄË°ì„ÇíÊ¥ªÁî®„Åó„ÅüÊ•≠ÂãôËá™ÂãïÂåñ„ÄÅ‰∫àÊ∏¨ÂàÜÊûê„ÄÅËá™ÁÑ∂Ë®ÄË™ûÂá¶ÁêÜ„Ç∑„Çπ„ÉÜ„É†„ÇíÈñãÁô∫„ÄÇChatGPTÁµ±Âêà„ÄÅÁîªÂÉèË™çË≠ò„ÄÅ„Éá„Éº„Çø„Éû„Ç§„Éã„É≥„Ç∞„Å™„Å©ÂπÖÂ∫É„ÅÑAI„ÇΩ„É™„É•„Éº„Ç∑„Éß„É≥„ÇíÊèê‰æõ„Åó„Åæ„Åô„ÄÇ',
      features: ['Ê©üÊ¢∞Â≠¶Áøí„É¢„Éá„É´ÊßãÁØâ', 'ChatGPT APIÁµ±Âêà', '‰∫àÊ∏¨ÂàÜÊûê„Ç∑„Çπ„ÉÜ„É†', '„Ç≥„É≥„Éî„É•„Éº„Çø„Éì„Ç∏„Éß„É≥'],
      price: '¬•500,000„Äú',
      duration: '2-6„É∂Êúà',
      clients: 150,
      satisfaction: 98,
      gradient: 'linear-gradient(135deg, rgba(var(--color-primary), 0.8) 0%, rgba(var(--color-secondary), 0.9) 100%)',
      image: '/api/placeholder/400/300'
    },
    {
      id: 2,
      category: 'design',
      icon: 'üé®',
      title: 'UX/UI„Éá„Ç∂„Ç§„É≥',
      subtitle: '„É¶„Éº„Ç∂„Éº‰ΩìÈ®ì„ÇíÈù©Êñ∞„Åô„Çã„Éá„Ç∂„Ç§„É≥',
      description: '„É¶„Éº„Ç∂„Éº‰∏≠ÂøÉË®≠Ë®à„Å´„Çà„ÇãWeb„Ç¢„Éó„É™„Ç±„Éº„Ç∑„Éß„É≥„ÄÅ„É¢„Éê„Ç§„É´„Ç¢„Éó„É™„ÅÆUI/UX„Éá„Ç∂„Ç§„É≥„ÄÇ„Éó„É≠„Éà„Çø„Ç§„Éî„É≥„Ç∞„Åã„Çâ„É¶„Éº„Ç∂„Éì„É™„ÉÜ„Ç£„ÉÜ„Çπ„Éà„Åæ„ÅßÂåÖÊã¨ÁöÑ„Å´„Çµ„Éù„Éº„Éà„Åó„Åæ„Åô„ÄÇ',
      features: ['„É¶„Éº„Ç∂„Éº„É™„Çµ„Éº„ÉÅ', '„Éó„É≠„Éà„Çø„Ç§„Éî„É≥„Ç∞', '„Éá„Ç∂„Ç§„É≥„Ç∑„Çπ„ÉÜ„É†', '„É¶„Éº„Ç∂„Éì„É™„ÉÜ„Ç£„ÉÜ„Çπ„Éà'],
      price: '¬•300,000„Äú',
      duration: '1-3„É∂Êúà',
      clients: 220,
      satisfaction: 96,
      gradient: 'linear-gradient(135deg, rgba(var(--color-accent), 0.6) 0%, rgba(var(--color-primary), 0.8) 100%)',
      image: '/api/placeholder/400/300'
    },
    {
      id: 3,
      category: 'development',
      icon: 'üíª',
      title: '„Éï„É´„Çπ„Çø„ÉÉ„ÇØÈñãÁô∫',
      subtitle: '„Çπ„Ç±„Éº„É©„Éñ„É´„Å™Web„Ç¢„Éó„É™„Ç±„Éº„Ç∑„Éß„É≥',
      description: 'React„ÄÅNext.js„ÄÅNode.jsÁ≠â„ÅÆ„É¢„ÉÄ„É≥ÊäÄË°ì„Çπ„Çø„ÉÉ„ÇØ„Çí‰ΩøÁî®„Åó„ÅüWeb„Ç¢„Éó„É™„Ç±„Éº„Ç∑„Éß„É≥ÈñãÁô∫„ÄÇPWAÂØæÂøú„ÄÅ„É¨„Çπ„Éù„É≥„Ç∑„Éñ„Éá„Ç∂„Ç§„É≥„ÄÅÈ´òÊÄßËÉΩ„Å™„Ç∑„Çπ„ÉÜ„É†„ÇíÊßãÁØâ„Åó„Åæ„Åô„ÄÇ',
      features: ['React/Next.jsÈñãÁô∫', 'PWAÂØæÂøú', 'APIË®≠Ë®à„ÉªÊßãÁØâ', '„Éá„Éº„Çø„Éô„Éº„ÇπË®≠Ë®à'],
      price: '¬•800,000„Äú',
      duration: '3-8„É∂Êúà',
      clients: 180,
      satisfaction: 97,
      gradient: 'linear-gradient(135deg, rgba(var(--color-secondary), 0.7) 0%, rgba(var(--color-accent), 0.5) 100%)',
      image: '/api/placeholder/400/300'
    },
    {
      id: 4,
      category: 'cloud',
      icon: '‚òÅÔ∏è',
      title: '„ÇØ„É©„Ç¶„Éâ„Ç§„É≥„Éï„É©',
      subtitle: 'AWS„ÉªAzure„ÉªGCPÂØæÂøú',
      description: '„Çπ„Ç±„Éº„É©„Éñ„É´„ÅßÈ´òÂèØÁî®ÊÄß„ÅÆ„ÇØ„É©„Ç¶„Éâ„Ç§„É≥„Éï„É©Ë®≠Ë®à„ÉªÊßãÁØâ„ÄÇDevOps„ÄÅCI/CD„ÄÅÁõ£Ë¶ñ„Ç∑„Çπ„ÉÜ„É†„ÄÅ„Çª„Ç≠„É•„É™„ÉÜ„Ç£ÂØæÁ≠ñ„Åæ„ÅßÂåÖÊã¨ÁöÑ„Å´„Çµ„Éù„Éº„Éà„Åó„Åæ„Åô„ÄÇ',
      features: ['AWS/Azure/GCP', 'DevOpsËá™ÂãïÂåñ', 'CI/CDÊßãÁØâ', '„Çª„Ç≠„É•„É™„ÉÜ„Ç£ÂØæÁ≠ñ'],
      price: '¬•400,000„Äú',
      duration: '1-4„É∂Êúà',
      clients: 120,
      satisfaction: 99,
      gradient: 'linear-gradient(135deg, rgba(var(--color-primary), 0.6) 0%, rgba(var(--color-accent), 0.8) 100%)',
      image: '/api/placeholder/400/300'
    },
    {
      id: 5,
      category: 'security',
      icon: 'üõ°Ô∏è',
      title: '„Çª„Ç≠„É•„É™„ÉÜ„Ç£Ë®∫Êñ≠',
      subtitle: '„Éö„Éç„Éà„É¨„Éº„Ç∑„Éß„É≥„ÉÜ„Çπ„Éà„ÉªËÑÜÂº±ÊÄßË®∫Êñ≠',
      description: 'ÂåÖÊã¨ÁöÑ„Å™„Çª„Ç≠„É•„É™„ÉÜ„Ç£Ë®∫Êñ≠„Å®„Éö„Éç„Éà„É¨„Éº„Ç∑„Éß„É≥„ÉÜ„Çπ„Éà„ÇíÂÆüÊñΩ„ÄÇWeb„Ç¢„Éó„É™„Ç±„Éº„Ç∑„Éß„É≥„ÄÅ„Éç„ÉÉ„Éà„ÉØ„Éº„ÇØ„ÄÅ„Ç§„É≥„Éï„É©„ÅÆËÑÜÂº±ÊÄß„ÇíÁâπÂÆö„Åó„ÄÅÂØæÁ≠ñ„Çí„ÅîÊèêÊ°à„Åó„Åæ„Åô„ÄÇ',
      features: ['ËÑÜÂº±ÊÄßË®∫Êñ≠', '„Éö„Éç„Éà„É¨„Éº„Ç∑„Éß„É≥„ÉÜ„Çπ„Éà', '„Çª„Ç≠„É•„É™„ÉÜ„Ç£ÂØæÁ≠ñÊèêÊ°à', 'OWASPÊ∫ñÊã†'],
      price: '¬•200,000„Äú',
      duration: '2ÈÄ±Èñì-2„É∂Êúà',
      clients: 95,
      satisfaction: 100,
      gradient: 'linear-gradient(135deg, rgba(var(--color-accent), 0.4) 0%, rgba(var(--color-secondary), 0.6) 100%)',
      image: '/api/placeholder/400/300'
    },
    {
      id: 6,
      category: 'data',
      icon: 'üìä',
      title: '„Éá„Éº„Çø„Ç¢„Éä„É™„ÉÜ„Ç£„ÇØ„Çπ',
      subtitle: '„Éì„ÉÉ„Ç∞„Éá„Éº„ÇøÂàÜÊûê„ÉªÂèØË¶ñÂåñ',
      description: '„Éì„ÉÉ„Ç∞„Éá„Éº„Çø„ÅÆÂèéÈõÜ„ÄÅÂàÜÊûê„ÄÅÂèØË¶ñÂåñ„ÇíÈÄö„Åò„Å¶„Éì„Ç∏„Éç„ÇπÊ¥ûÂØü„ÇíÊèê‰æõ„ÄÇBI„ÉÄ„ÉÉ„Ç∑„É•„Éú„Éº„ÉâÊßãÁØâ„ÄÅ„É™„Ç¢„É´„Çø„Ç§„É†ÂàÜÊûê„ÄÅ‰∫àÊ∏¨„É¢„Éá„É™„É≥„Ç∞„ÇíÂÆüÁèæ„Åó„Åæ„Åô„ÄÇ',
      features: ['„Éá„Éº„ÇøÂèØË¶ñÂåñ', 'BI„ÉÄ„ÉÉ„Ç∑„É•„Éú„Éº„Éâ', '„É™„Ç¢„É´„Çø„Ç§„É†ÂàÜÊûê', '‰∫àÊ∏¨„É¢„Éá„É™„É≥„Ç∞'],
      price: '¬•600,000„Äú',
      duration: '2-5„É∂Êúà',
      clients: 85,
      satisfaction: 95,
      gradient: 'linear-gradient(135deg, rgba(var(--color-secondary), 0.5) 0%, rgba(var(--color-primary), 0.7) 100%)',
      image: '/api/placeholder/400/300'
    }
  ]

  const servicesToRender = services.length > 0 ? services : defaultServices

  return (
    <section id="services-section" className={`${styles.servicesSection} ${className}`}>
      {/* ËÉåÊôØË£ÖÈ£æ */}
      <div className={styles.backgroundDecorations}>
        <div className={styles.decoration1}></div>
        <div className={styles.decoration2}></div>
        <div className={styles.decoration3}></div>
      </div>

      <div className={styles.container}>
        {/* „Éò„ÉÉ„ÉÄ„Éº„Çª„ÇØ„Ç∑„Éß„É≥ */}
        <div className={`${styles.header} ${isVisible ? styles.headerVisible : ''}`}>
          <div className={styles.titleSection}>
            <span className={styles.badge}>SERVICES</span>
            <h2 className={styles.title} dangerouslySetInnerHTML={{ __html: title }}></h2>
            <p className={styles.subtitle}>{subtitle}</p>
          </div>
          
          <div className={styles.stats}>
            <div className={styles.statItem}>
              <span className={styles.statNumber}>500+</span>
              <span className={styles.statLabel}>„Éó„É≠„Ç∏„Çß„ÇØ„ÉàÂÆå‰∫Ü</span>
            </div>
            <div className={styles.statItem}>
              <span className={styles.statNumber}>98%</span>
              <span className={styles.statLabel}>È°ßÂÆ¢Ê∫ÄË∂≥Â∫¶</span>
            </div>
            <div className={styles.statItem}>
              <span className={styles.statNumber}>24/7</span>
              <span className={styles.statLabel}>„Çµ„Éù„Éº„Éà‰ΩìÂà∂</span>
            </div>
          </div>
        </div>

        {/* „Çµ„Éº„Éì„Çπ„Ç∞„É™„ÉÉ„Éâ */}
        <div className={`${styles.servicesGrid} ${isVisible ? styles.gridVisible : ''}`}>
          {servicesToRender.map((service, index) => (
            <div
              key={service.id}
              className={`${styles.serviceCard} ${isVisible ? styles.cardVisible : ''}`}
              style={{ 
                transitionDelay: `${index * 150}ms`,
                background: service.gradient
              }}
              onMouseEnter={() => setHoveredIndex(index)}
              onMouseLeave={() => setHoveredIndex(null)}
            >
              {/* „Ç´„Éº„Éâ„Éò„ÉÉ„ÉÄ„Éº */}
              <div className={styles.cardHeader}>
                <div className={styles.cardIcon}>
                  <span>{service.icon}</span>
                </div>
                <div className={styles.cardMeta}>
                  <span className={styles.cardPrice}>{service.price}</span>
                  <span className={styles.cardDuration}>{service.duration}</span>
                </div>
              </div>

              {/* „Ç´„Éº„Éâ„Ç≥„É≥„ÉÜ„É≥„ÉÑ */}
              <div className={styles.cardContent}>
                <h3 className={styles.cardTitle}>{service.title}</h3>
                <p className={styles.cardSubtitle}>{service.subtitle}</p>
                <p className={styles.cardDescription}>{service.description}</p>

                {/* ÁâπÂæ¥„É™„Çπ„Éà */}
                <div className={styles.featuresList}>
                  {service.features.map((feature, featureIndex) => (
                    <div 
                      key={featureIndex} 
                      className={`${styles.featureItem} ${isVisible ? styles.featureVisible : ''}`}
                      style={{ transitionDelay: `${featureIndex * 100}ms` }}
                    >
                      <span className={styles.featureCheck}>‚úì</span>
                      <span className={styles.featureText}>{feature}</span>
                    </div>
                  ))}
                </div>
              </div>

              {/* „Ç´„Éº„Éâ„Éï„ÉÉ„Çø„Éº */}
              <div className={styles.cardFooter}>
                <div className={styles.clientStats}>
                  <div className={styles.clientStat}>
                    <span className={styles.clientNumber}>{service.clients}</span>
                    <span className={styles.clientLabel}>„ÇØ„É©„Ç§„Ç¢„É≥„Éà</span>
                  </div>
                  <div className={styles.satisfactionStat}>
                    <span className={styles.satisfactionNumber}>{service.satisfaction}%</span>
                    <span className={styles.satisfactionLabel}>Ê∫ÄË∂≥Â∫¶</span>
                  </div>
                </div>
                
                <button className={styles.ctaButton}>
                  <span>Ë©≥Á¥∞„ÇíË¶ã„Çã</span>
                  <svg viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                    <path d="M5 12h14m-7-7l7 7-7 7" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"/>
                  </svg>
                </button>
              </div>

              {/* „Éõ„Éê„Éº„Ç™„Éº„Éê„Éº„É¨„Ç§ */}
              <div className={`${styles.cardOverlay} ${hoveredIndex === index ? styles.overlayVisible : ''}`}>
                <div className={styles.overlayContent}>
                  <h4>‰ªä„Åô„ÅêÁõ∏Ë´á</h4>
                  <p>ÁÑ°Êñô„Åß„Éó„É≠„Ç∏„Çß„ÇØ„Éà„ÅÆÁõ∏Ë´á„ÇíÊâø„Çä„Åæ„Åô</p>
                  <button className={styles.overlayButton}>
                    „ÅäÂïè„ÅÑÂêà„Çè„Åõ
                  </button>
                </div>
              </div>
            </div>
          ))}
        </div>

        {/* CTA „Çª„ÇØ„Ç∑„Éß„É≥ */}
        <div className={`${styles.ctaSection} ${isVisible ? styles.ctaVisible : ''}`}>
          <div className={styles.ctaContent}>
            <h3 className={styles.ctaTitle}>„Éó„É≠„Ç∏„Çß„ÇØ„Éà„ÇíÂßã„ÇÅ„Åæ„Åõ„Çì„ÅãÔºü</h3>
            <p className={styles.ctaDescription}>
              „ÅäÂÆ¢Êßò„ÅÆ„Éì„Ç∏„Éç„ÇπË™≤È°å„Çí„ÅäËÅû„Åã„Åõ„Åè„Å†„Åï„ÅÑ„ÄÇÊúÄÈÅ©„Å™„ÇΩ„É™„É•„Éº„Ç∑„Éß„É≥„Çí„ÅîÊèêÊ°à„ÅÑ„Åü„Åó„Åæ„Åô„ÄÇ
            </p>
            <div className={styles.ctaButtons}>
              <button className={styles.primaryCta}>
                ÁÑ°ÊñôÁõ∏Ë´á„Çí‰∫àÁ¥Ñ
              </button>
              <button className={styles.secondaryCta}>
                ‰∫ã‰æã„ÇíË¶ã„Çã
              </button>
            </div>
          </div>
        </div>
      </div>
    </section>
  )
}

export default ServicesSection
